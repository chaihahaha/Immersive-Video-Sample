#ifndef FAKE_CURL_H_
#define FAKE_CURL_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>
#include <stddef.h>
#include <stdarg.h>
#include <sys/types.h>
#include <time.h>

// --- Basic types from the full curl.h ---
#if defined(BUILDING_LIBCURL) || defined(CURL_STRICTER)
typedef struct Curl_easy CURL;
typedef struct Curl_share CURLSH;
typedef struct Curl_multi CURLM;
#else
typedef void CURL;
typedef void CURLSH;
typedef void CURLM;
#endif

typedef long long curl_off_t;

#define CURL_ERROR_SIZE 256 // Added

// --- CURLcode (Error codes) - Based on full curl.h ---
typedef enum {
  CURLE_OK = 0,
  CURLE_UNSUPPORTED_PROTOCOL,    /* 1 */
  CURLE_FAILED_INIT,             /* 2 */
  CURLE_URL_MALFORMAT,           /* 3 */
  CURLE_NOT_BUILT_IN,            /* 4 */
  CURLE_COULDNT_RESOLVE_PROXY,   /* 5 */
  CURLE_COULDNT_RESOLVE_HOST,    /* 6 */
  CURLE_COULDNT_CONNECT,         /* 7 */
  CURLE_WEIRD_SERVER_REPLY,      /* 8 */
  CURLE_REMOTE_ACCESS_DENIED,    /* 9 */
  CURLE_FTP_ACCEPT_FAILED,       /* 10 */
  CURLE_FTP_WEIRD_PASS_REPLY,    /* 11 */
  CURLE_FTP_ACCEPT_TIMEOUT,      /* 12 */
  CURLE_FTP_WEIRD_PASV_REPLY,    /* 13 */
  CURLE_FTP_WEIRD_227_FORMAT,    /* 14 */
  CURLE_FTP_CANT_GET_HOST,       /* 15 */
  CURLE_HTTP2,                   /* 16 */
  CURLE_FTP_COULDNT_SET_TYPE,    /* 17 */
  CURLE_PARTIAL_FILE,            /* 18 */
  CURLE_FTP_COULDNT_RETR_FILE,   /* 19 */
  CURLE_OBSOLETE20,              /* 20 - NOT USED */
  CURLE_QUOTE_ERROR,             /* 21 */
  CURLE_HTTP_RETURNED_ERROR,     /* 22 */
  CURLE_WRITE_ERROR,             /* 23 */
  CURLE_OBSOLETE24,              /* 24 - NOT USED */
  CURLE_UPLOAD_FAILED,           /* 25 */
  CURLE_READ_ERROR,              /* 26 */
  CURLE_OUT_OF_MEMORY,           /* 27 */
  CURLE_OPERATION_TIMEDOUT,      /* 28 */
  CURLE_OBSOLETE29,              /* 29 - NOT USED */
  CURLE_FTP_PORT_FAILED,         /* 30 */
  CURLE_FTP_COULDNT_USE_REST,    /* 31 */
  CURLE_OBSOLETE32,              /* 32 - NOT USED */
  CURLE_RANGE_ERROR,             /* 33 */
  CURLE_HTTP_POST_ERROR,         /* 34 */
  CURLE_SSL_CONNECT_ERROR,       /* 35 */
  CURLE_BAD_DOWNLOAD_RESUME,     /* 36 */
  CURLE_FILE_COULDNT_READ_FILE,  /* 37 */
  CURLE_LDAP_CANNOT_BIND,        /* 38 */
  CURLE_LDAP_SEARCH_FAILED,      /* 39 */
  CURLE_OBSOLETE40,              /* 40 - NOT USED */
  CURLE_FUNCTION_NOT_FOUND,      /* 41 */
  CURLE_ABORTED_BY_CALLBACK,     /* 42 */
  CURLE_BAD_FUNCTION_ARGUMENT,   /* 43 */
  CURLE_OBSOLETE44,              /* 44 - NOT USED */
  CURLE_INTERFACE_FAILED,        /* 45 */
  CURLE_OBSOLETE46,              /* 46 - NOT USED */
  CURLE_TOO_MANY_REDIRECTS,      /* 47 */
  CURLE_UNKNOWN_OPTION,          /* 48 */
  CURLE_TELNET_OPTION_SYNTAX,    /* 49 */
  CURLE_OBSOLETE50,              /* 50 - NOT USED */
  CURLE_OBSOLETE51,              /* 51 - NOT USED */
  CURLE_GOT_NOTHING,             /* 52 */
  CURLE_SSL_ENGINE_NOTFOUND,     /* 53 */
  CURLE_SSL_ENGINE_SETFAILED,    /* 54 */
  CURLE_SEND_ERROR,              /* 55 */
  CURLE_RECV_ERROR,              /* 56 */
  CURLE_OBSOLETE57,              /* 57 - NOT IN USE */
  CURLE_SSL_CERTPROBLEM,         /* 58 */
  CURLE_SSL_CIPHER,              /* 59 */
  CURLE_PEER_FAILED_VERIFICATION, /* 60 */
  CURLE_BAD_CONTENT_ENCODING,    /* 61 */
  CURLE_LDAP_INVALID_URL,        /* 62 */
  CURLE_FILESIZE_EXCEEDED,       /* 63 */
  CURLE_USE_SSL_FAILED,          /* 64 */
  CURLE_SEND_FAIL_REWIND,        /* 65 */
  CURLE_SSL_ENGINE_INITFAILED,   /* 66 */
  CURLE_LOGIN_DENIED,            /* 67 */
  CURLE_TFTP_NOTFOUND,           /* 68 */
  CURLE_TFTP_PERM,               /* 69 */
  CURLE_REMOTE_DISK_FULL,        /* 70 */
  CURLE_TFTP_ILLEGAL,            /* 71 */
  CURLE_TFTP_UNKNOWNID,          /* 72 */
  CURLE_REMOTE_FILE_EXISTS,      /* 73 */
  CURLE_TFTP_NOSUCHUSER,         /* 74 */
  CURLE_CONV_FAILED,             /* 75 */
  CURLE_CONV_REQD,               /* 76 */
  CURLE_SSL_CACERT_BADFILE,      /* 77 */
  CURLE_REMOTE_FILE_NOT_FOUND,   /* 78 */
  CURLE_SSH,                     /* 79 */
  CURLE_SSL_SHUTDOWN_FAILED,     /* 80 */
  CURLE_AGAIN,                   /* 81 */
  CURLE_SSL_CRL_BADFILE,         /* 82 */
  CURLE_SSL_ISSUER_ERROR,        /* 83 */
  CURLE_FTP_PRET_FAILED,         /* 84 */
  CURLE_RTSP_CSEQ_ERROR,         /* 85 */
  CURLE_RTSP_SESSION_ERROR,      /* 86 */
  CURLE_FTP_BAD_FILE_LIST,       /* 87 */
  CURLE_CHUNK_FAILED,            /* 88 */
  CURLE_NO_CONNECTION_AVAILABLE, /* 89 */
  CURLE_SSL_PINNEDPUBKEYNOTMATCH, /* 90 */
  CURLE_SSL_INVALIDCERTSTATUS,   /* 91 */
  CURLE_HTTP2_STREAM,            /* 92 */
  CURLE_RECURSIVE_API_CALL,      /* 93 */
  CURLE_AUTH_ERROR,              /* 94 */
  CURLE_HTTP3,                   /* 95 */
  CURL_LAST /* never use! */
} CURLcode;

// --- CURLMcode (Multi-handle Error codes) - Based on full curl.h ---
typedef enum {
  CURLM_CALL_MULTI_PERFORM = -1,
  CURLM_OK,
  CURLM_BAD_HANDLE,
  CURLM_BAD_EASY_HANDLE,
  CURLM_OUT_OF_MEMORY,
  CURLM_INTERNAL_ERROR,
  CURLM_BAD_SOCKET,
  CURLM_UNKNOWN_OPTION,
  CURLM_ADDED_ALREADY,
  CURLM_RECURSIVE_API_CALL,
  CURLM_WAKEUP_FAILURE,
  CURLM_LAST
} CURLMcode;

// --- CURLMSG (Message from multi-handle) - Based on full curl.h ---
typedef enum {
  CURLMSG_NONE,
  CURLMSG_DONE,
  CURLMSG_LAST
} CURLMSG;

struct CURLMsg {
  CURLMSG msg;
  CURL *easy_handle;
  union {
    void *whatever;
    CURLcode result;
  } data;
};

// --- Option types - Based on full curl.h ---
#define CURLOPTTYPE_LONG          0
#define CURLOPTTYPE_OBJECTPOINT   10000
#define CURLOPTTYPE_FUNCTIONPOINT 20000
#define CURLOPTTYPE_OFF_T         30000
// handy aliases
#define CURLOPTTYPE_STRINGPOINT  CURLOPTTYPE_OBJECTPOINT
#define CURLOPTTYPE_SLISTPOINT   CURLOPTTYPE_OBJECTPOINT


// --- CURLoption (Easy handle options) - Subset for OMAF, from full curl.h values ---
typedef enum {
  CURLOPT_WRITEDATA = CURLOPTTYPE_OBJECTPOINT + 1,
  CURLOPT_URL = CURLOPTTYPE_STRINGPOINT + 2,
  CURLOPT_PORT = CURLOPTTYPE_LONG + 3,
  CURLOPT_PROXY = CURLOPTTYPE_STRINGPOINT + 4,
  CURLOPT_USERPWD = CURLOPTTYPE_STRINGPOINT + 5,
  CURLOPT_PROXYUSERPWD = CURLOPTTYPE_STRINGPOINT + 6,
  CURLOPT_RANGE = CURLOPTTYPE_STRINGPOINT + 7,
  CURLOPT_READDATA = CURLOPTTYPE_OBJECTPOINT + 9,
  CURLOPT_ERRORBUFFER = CURLOPTTYPE_OBJECTPOINT + 10,
  CURLOPT_WRITEFUNCTION = CURLOPTTYPE_FUNCTIONPOINT + 11,
  CURLOPT_READFUNCTION = CURLOPTTYPE_FUNCTIONPOINT + 12,
  CURLOPT_TIMEOUT = CURLOPTTYPE_LONG + 13,
  CURLOPT_INFILESIZE = CURLOPTTYPE_LONG + 14,
  CURLOPT_POSTFIELDS = CURLOPTTYPE_OBJECTPOINT + 15,
  CURLOPT_REFERER = CURLOPTTYPE_STRINGPOINT + 16,
  CURLOPT_FTPPORT = CURLOPTTYPE_STRINGPOINT + 17,
  CURLOPT_USERAGENT = CURLOPTTYPE_STRINGPOINT + 18,
  CURLOPT_LOW_SPEED_LIMIT = CURLOPTTYPE_LONG + 19,
  CURLOPT_LOW_SPEED_TIME = CURLOPTTYPE_LONG + 20,
  CURLOPT_RESUME_FROM = CURLOPTTYPE_LONG + 21,
  CURLOPT_COOKIE = CURLOPTTYPE_STRINGPOINT + 22,
  CURLOPT_HTTPHEADER = CURLOPTTYPE_SLISTPOINT + 23,
  CURLOPT_HTTPPOST = CURLOPTTYPE_OBJECTPOINT + 24,
  CURLOPT_SSLCERT = CURLOPTTYPE_STRINGPOINT + 25,
  CURLOPT_KEYPASSWD = CURLOPTTYPE_STRINGPOINT + 26,
  CURLOPT_CRLF = CURLOPTTYPE_LONG + 27,
  CURLOPT_QUOTE = CURLOPTTYPE_SLISTPOINT + 28,
  CURLOPT_HEADERDATA = CURLOPTTYPE_OBJECTPOINT + 29,
  CURLOPT_COOKIEFILE = CURLOPTTYPE_STRINGPOINT + 31,
  CURLOPT_SSLVERSION = CURLOPTTYPE_LONG + 32,
  CURLOPT_TIMECONDITION = CURLOPTTYPE_LONG + 33,
  CURLOPT_TIMEVALUE = CURLOPTTYPE_LONG + 34,
  CURLOPT_CUSTOMREQUEST = CURLOPTTYPE_STRINGPOINT + 36,
  CURLOPT_STDERR = CURLOPTTYPE_OBJECTPOINT + 37,
  CURLOPT_POSTQUOTE = CURLOPTTYPE_SLISTPOINT + 39,
  CURLOPT_VERBOSE = CURLOPTTYPE_LONG + 41,
  CURLOPT_HEADER = CURLOPTTYPE_LONG + 42,
  CURLOPT_NOPROGRESS = CURLOPTTYPE_LONG + 43,
  CURLOPT_NOBODY = CURLOPTTYPE_LONG + 44,
  CURLOPT_FAILONERROR = CURLOPTTYPE_LONG + 45,
  CURLOPT_UPLOAD = CURLOPTTYPE_LONG + 46,
  CURLOPT_POST = CURLOPTTYPE_LONG + 47,
  CURLOPT_DIRLISTONLY = CURLOPTTYPE_LONG + 48,
  CURLOPT_APPEND = CURLOPTTYPE_LONG + 50,
  CURLOPT_NETRC = CURLOPTTYPE_LONG + 51,
  CURLOPT_FOLLOWLOCATION = CURLOPTTYPE_LONG + 52,
  CURLOPT_TRANSFERTEXT = CURLOPTTYPE_LONG + 53,
  CURLOPT_PUT = CURLOPTTYPE_LONG + 54,
  CURLOPT_PROGRESSFUNCTION = CURLOPTTYPE_FUNCTIONPOINT + 56,
  CURLOPT_PROGRESSDATA = CURLOPTTYPE_OBJECTPOINT + 57,
  CURLOPT_AUTOREFERER = CURLOPTTYPE_LONG + 58,
  CURLOPT_PROXYPORT = CURLOPTTYPE_LONG + 59,
  CURLOPT_POSTFIELDSIZE = CURLOPTTYPE_LONG + 60,
  CURLOPT_HTTPPROXYTUNNEL = CURLOPTTYPE_LONG + 61,
  CURLOPT_INTERFACE = CURLOPTTYPE_STRINGPOINT + 62,
  CURLOPT_KRBLEVEL = CURLOPTTYPE_STRINGPOINT + 63,
  CURLOPT_SSL_VERIFYPEER = CURLOPTTYPE_LONG + 64,
  CURLOPT_CAINFO = CURLOPTTYPE_STRINGPOINT + 65,
  CURLOPT_MAXREDIRS = CURLOPTTYPE_LONG + 68,
  CURLOPT_FILETIME = CURLOPTTYPE_LONG + 69,
  CURLOPT_TELNETOPTIONS = CURLOPTTYPE_SLISTPOINT + 70,
  CURLOPT_MAXCONNECTS = CURLOPTTYPE_LONG + 71,
  CURLOPT_FRESH_CONNECT = CURLOPTTYPE_LONG + 74,
  CURLOPT_FORBID_REUSE = CURLOPTTYPE_LONG + 75,
  CURLOPT_RANDOM_FILE = CURLOPTTYPE_STRINGPOINT + 76,
  CURLOPT_EGDSOCKET = CURLOPTTYPE_STRINGPOINT + 77,
  CURLOPT_CONNECTTIMEOUT = CURLOPTTYPE_LONG + 78,
  CURLOPT_HEADERFUNCTION = CURLOPTTYPE_FUNCTIONPOINT + 79,
  CURLOPT_HTTPGET = CURLOPTTYPE_LONG + 80,
  CURLOPT_SSL_VERIFYHOST = CURLOPTTYPE_LONG + 81,
  CURLOPT_COOKIEJAR = CURLOPTTYPE_STRINGPOINT + 82,
  CURLOPT_SSL_CIPHER_LIST = CURLOPTTYPE_STRINGPOINT + 83,
  CURLOPT_HTTP_VERSION = CURLOPTTYPE_LONG + 84,
  CURLOPT_FTP_USE_EPSV = CURLOPTTYPE_LONG + 85,
  CURLOPT_SSLCERTTYPE = CURLOPTTYPE_STRINGPOINT + 86,
  CURLOPT_SSLKEY = CURLOPTTYPE_STRINGPOINT + 87,
  CURLOPT_SSLKEYTYPE = CURLOPTTYPE_STRINGPOINT + 88,
  CURLOPT_SSLENGINE = CURLOPTTYPE_STRINGPOINT + 89,
  CURLOPT_SSLENGINE_DEFAULT = CURLOPTTYPE_LONG + 90,
  CURLOPT_DNS_CACHE_TIMEOUT = CURLOPTTYPE_LONG + 92,
  CURLOPT_PREQUOTE = CURLOPTTYPE_SLISTPOINT + 93,
  CURLOPT_DEBUGFUNCTION = CURLOPTTYPE_FUNCTIONPOINT + 94,
  CURLOPT_DEBUGDATA = CURLOPTTYPE_OBJECTPOINT + 95,
  CURLOPT_COOKIESESSION = CURLOPTTYPE_LONG + 96,
  CURLOPT_CAPATH = CURLOPTTYPE_STRINGPOINT + 97,
  CURLOPT_BUFFERSIZE = CURLOPTTYPE_LONG + 98,
  CURLOPT_NOSIGNAL = CURLOPTTYPE_LONG + 99,
  CURLOPT_SHARE = CURLOPTTYPE_OBJECTPOINT + 100,
  CURLOPT_PROXYTYPE = CURLOPTTYPE_LONG + 101,
  CURLOPT_ACCEPT_ENCODING = CURLOPTTYPE_STRINGPOINT + 102,
  CURLOPT_PRIVATE = CURLOPTTYPE_OBJECTPOINT + 103,
  CURLOPT_HTTP200ALIASES = CURLOPTTYPE_SLISTPOINT + 104,
  CURLOPT_UNRESTRICTED_AUTH = CURLOPTTYPE_LONG + 105,
  CURLOPT_FTP_USE_EPRT = CURLOPTTYPE_LONG + 106,
  CURLOPT_HTTPAUTH = CURLOPTTYPE_LONG + 107,
  CURLOPT_SSL_CTX_FUNCTION = CURLOPTTYPE_FUNCTIONPOINT + 108,
  CURLOPT_SSL_CTX_DATA = CURLOPTTYPE_OBJECTPOINT + 109,
  CURLOPT_FTP_CREATE_MISSING_DIRS = CURLOPTTYPE_LONG + 110,
  CURLOPT_PROXYAUTH = CURLOPTTYPE_LONG + 111,
  CURLOPT_FTP_RESPONSE_TIMEOUT = CURLOPTTYPE_LONG + 112,
  CURLOPT_IPRESOLVE = CURLOPTTYPE_LONG + 113,
  CURLOPT_MAXFILESIZE = CURLOPTTYPE_LONG + 114,
  CURLOPT_INFILESIZE_LARGE = CURLOPTTYPE_OFF_T + 115,
  CURLOPT_RESUME_FROM_LARGE = CURLOPTTYPE_OFF_T + 116,
  CURLOPT_MAXFILESIZE_LARGE = CURLOPTTYPE_OFF_T + 117,
  CURLOPT_NETRC_FILE = CURLOPTTYPE_STRINGPOINT + 118,
  CURLOPT_USE_SSL = CURLOPTTYPE_LONG + 119,
  CURLOPT_POSTFIELDSIZE_LARGE = CURLOPTTYPE_OFF_T + 120,
  CURLOPT_TCP_NODELAY = CURLOPTTYPE_LONG + 121,
  CURLOPT_FTPSSLAUTH = CURLOPTTYPE_LONG + 129,
  CURLOPT_IOCTLFUNCTION = CURLOPTTYPE_FUNCTIONPOINT + 130,
  CURLOPT_IOCTLDATA = CURLOPTTYPE_OBJECTPOINT + 131,
  CURLOPT_FTP_ACCOUNT = CURLOPTTYPE_STRINGPOINT + 134,
  CURLOPT_COOKIELIST = CURLOPTTYPE_STRINGPOINT + 135,
  CURLOPT_IGNORE_CONTENT_LENGTH = CURLOPTTYPE_LONG + 136,
  CURLOPT_FTP_SKIP_PASV_IP = CURLOPTTYPE_LONG + 137,
  CURLOPT_FTP_FILEMETHOD = CURLOPTTYPE_LONG + 138,
  CURLOPT_LOCALPORT = CURLOPTTYPE_LONG + 139,
  CURLOPT_LOCALPORTRANGE = CURLOPTTYPE_LONG + 140,
  CURLOPT_CONNECT_ONLY = CURLOPTTYPE_LONG + 141,
  CURLOPT_MAX_SEND_SPEED_LARGE = CURLOPTTYPE_OFF_T + 145,
  CURLOPT_MAX_RECV_SPEED_LARGE = CURLOPTTYPE_OFF_T + 146,
  CURLOPT_FTP_ALTERNATIVE_TO_USER = CURLOPTTYPE_STRINGPOINT + 147,
  CURLOPT_SOCKOPTFUNCTION = CURLOPTTYPE_FUNCTIONPOINT + 148,
  CURLOPT_SOCKOPTDATA = CURLOPTTYPE_OBJECTPOINT + 149,
  CURLOPT_SSL_SESSIONID_CACHE = CURLOPTTYPE_LONG + 150,
  CURLOPT_SSH_AUTH_TYPES = CURLOPTTYPE_LONG + 151,
  CURLOPT_SSH_PUBLIC_KEYFILE = CURLOPTTYPE_STRINGPOINT + 152,
  CURLOPT_SSH_PRIVATE_KEYFILE = CURLOPTTYPE_STRINGPOINT + 153,
  CURLOPT_FTP_SSL_CCC = CURLOPTTYPE_LONG + 154,
  CURLOPT_TIMEOUT_MS = CURLOPTTYPE_LONG + 155,
  CURLOPT_CONNECTTIMEOUT_MS = CURLOPTTYPE_LONG + 156,
  CURLOPT_USERNAME = CURLOPTTYPE_STRINGPOINT + 173,
  CURLOPT_PASSWORD = CURLOPTTYPE_STRINGPOINT + 174,
  CURLOPT_PROXYUSERNAME = CURLOPTTYPE_STRINGPOINT + 175,
  CURLOPT_PROXYPASSWORD = CURLOPTTYPE_STRINGPOINT + 176,
  CURLOPT_NOPROXY = CURLOPTTYPE_STRINGPOINT + 177,
  CURLOPT_XFERINFOFUNCTION = CURLOPTTYPE_FUNCTIONPOINT + 219,
  CURLOPT_LASTENTRY
} CURLoption;

// Aliases from OMAF's curl_fake.h or common usage
#define CURLOPT_WRITEHEADER CURLOPT_HEADERDATA
#define CURLOPT_XFERINFODATA CURLOPT_PROGRESSDATA
#define CURLOPT_SERVER_RESPONSE_TIMEOUT CURLOPT_FTP_RESPONSE_TIMEOUT

// --- CURLINFO (getinfo options) - Subset for OMAF, from full curl.h values ---
#define CURLINFO_STRING   0x100000
#define CURLINFO_LONG     0x200000
#define CURLINFO_DOUBLE   0x300000
#define CURLINFO_SLIST    0x400000
#define CURLINFO_PTR      CURLINFO_SLIST // OMAF uses PTR for some that are SLIST in full
#define CURLINFO_SOCKET   0x500000
#define CURLINFO_OFF_T    0x600000
#define CURLINFO_TYPEMASK 0xF00000 // Added for better va_arg handling

typedef enum {
  CURLINFO_NONE = 0,
  CURLINFO_EFFECTIVE_URL = CURLINFO_STRING + 1,
  CURLINFO_RESPONSE_CODE = CURLINFO_LONG + 2,
  CURLINFO_TOTAL_TIME = CURLINFO_DOUBLE + 3,
  CURLINFO_NAMELOOKUP_TIME = CURLINFO_DOUBLE + 4,
  CURLINFO_CONNECT_TIME = CURLINFO_DOUBLE + 5,
  CURLINFO_PRETRANSFER_TIME = CURLINFO_DOUBLE + 6,
  CURLINFO_SIZE_UPLOAD_T = CURLINFO_OFF_T + 7,
  CURLINFO_SIZE_DOWNLOAD_T = CURLINFO_OFF_T + 8,
  CURLINFO_SPEED_DOWNLOAD_T = CURLINFO_OFF_T + 9,
  CURLINFO_SPEED_UPLOAD_T = CURLINFO_OFF_T + 10,
  CURLINFO_HEADER_SIZE = CURLINFO_LONG + 11,
  CURLINFO_REQUEST_SIZE = CURLINFO_LONG + 12,
  CURLINFO_SSL_VERIFYRESULT = CURLINFO_LONG + 13,
  CURLINFO_FILETIME_T = CURLINFO_OFF_T + 14, // Renamed from FILETIME
  CURLINFO_CONTENT_LENGTH_DOWNLOAD_T = CURLINFO_OFF_T + 15,
  CURLINFO_CONTENT_LENGTH_UPLOAD_T = CURLINFO_OFF_T + 16,
  CURLINFO_STARTTRANSFER_TIME = CURLINFO_DOUBLE + 17,
  CURLINFO_CONTENT_TYPE = CURLINFO_STRING + 18,
  CURLINFO_REDIRECT_TIME = CURLINFO_DOUBLE + 19,
  CURLINFO_REDIRECT_COUNT = CURLINFO_LONG + 20,
  CURLINFO_PRIVATE = CURLINFO_STRING + 21, // Note: type in CURLINFO is STRING, but set via OBJECTPOINT
  CURLINFO_HTTP_CONNECTCODE = CURLINFO_LONG + 22,
  CURLINFO_HTTPAUTH_AVAIL = CURLINFO_LONG + 23,
  CURLINFO_PROXYAUTH_AVAIL = CURLINFO_LONG + 24,
  CURLINFO_OS_ERRNO = CURLINFO_LONG + 25,
  CURLINFO_NUM_CONNECTS = CURLINFO_LONG + 26,
  CURLINFO_SSL_ENGINES = CURLINFO_SLIST + 27,
  CURLINFO_COOKIELIST = CURLINFO_SLIST + 28,
  CURLINFO_LASTSOCKET = CURLINFO_SOCKET + 29, // Changed from LONG
  CURLINFO_FTP_ENTRY_PATH = CURLINFO_STRING + 30,
  CURLINFO_REDIRECT_URL = CURLINFO_STRING + 31,
  CURLINFO_PRIMARY_IP = CURLINFO_STRING + 32,
  CURLINFO_APPCONNECT_TIME = CURLINFO_DOUBLE + 33,
  CURLINFO_TOTAL_TIME_T = CURLINFO_OFF_T + 50,
  CURLINFO_NAMELOOKUP_TIME_T = CURLINFO_OFF_T + 51,
  CURLINFO_CONNECT_TIME_T = CURLINFO_OFF_T + 52,
  CURLINFO_PRETRANSFER_TIME_T = CURLINFO_OFF_T + 53,
  CURLINFO_STARTTRANSFER_TIME_T = CURLINFO_OFF_T + 54,
  CURLINFO_REDIRECT_TIME_T = CURLINFO_OFF_T + 55,
  CURLINFO_APPCONNECT_TIME_T = CURLINFO_OFF_T + 56,
  CURLINFO_LASTONE = 57 // Guard
} CURLINFO;

#define CURLINFO_HTTP_CODE CURLINFO_RESPONSE_CODE

// --- CURLMoption (Multi handle options) - Subset for OMAF, from full curl.h values ---
typedef enum {
  CURLMOPT_SOCKETFUNCTION = CURLOPTTYPE_FUNCTIONPOINT + 1,
  CURLMOPT_SOCKETDATA = CURLOPTTYPE_OBJECTPOINT + 2,
  CURLMOPT_PIPELINING = CURLOPTTYPE_LONG + 3,
  CURLMOPT_TIMERFUNCTION = CURLOPTTYPE_FUNCTIONPOINT + 4,
  CURLMOPT_TIMERDATA = CURLOPTTYPE_OBJECTPOINT + 5,
  CURLMOPT_MAXCONNECTS = CURLOPTTYPE_LONG + 6,
  CURLMOPT_LASTENTRY
} CURLMoption;


// --- Global Flags - Based on full curl.h ---
#define CURL_GLOBAL_SSL (1L<<0)
#define CURL_GLOBAL_WIN32 (1L<<1)
#define CURL_GLOBAL_ALL (CURL_GLOBAL_SSL|CURL_GLOBAL_WIN32)
#define CURL_GLOBAL_NOTHING 0
#define CURL_GLOBAL_DEFAULT CURL_GLOBAL_ALL
#define CURL_GLOBAL_ACK_EINTR (1L<<2)

// --- Proxy Types - Based on full curl.h ---
typedef enum {
  CURLPROXY_HTTP = 0,
  CURLPROXY_HTTP_1_0 = 1,
  CURLPROXY_HTTPS = 2,
  CURLPROXY_SOCKS4 = 4,
  CURLPROXY_SOCKS5 = 5,
  CURLPROXY_SOCKS4A = 6,
  CURLPROXY_SOCKS5_HOSTNAME = 7
} curl_proxytype;

// --- Debug callback type enum ---
typedef enum {
  CURLINFO_TEXT = 0,
  CURLINFO_HEADER_IN,
  CURLINFO_HEADER_OUT,
  CURLINFO_DATA_IN,
  CURLINFO_DATA_OUT,
  CURLINFO_SSL_DATA_IN,
  CURLINFO_SSL_DATA_OUT,
  CURLINFO_END
} curl_infotype;

// --- Callbacks (signatures from full curl.h) ---
typedef size_t (*curl_write_callback)(char *buffer, size_t size, size_t nitems, void *outstream);
typedef size_t (*curl_header_callback)(char *buffer, size_t size, size_t nitems, void *userdata); // Added
typedef size_t (*curl_read_callback)(char *buffer, size_t size, size_t nitems, void *instream);
typedef int (*curl_progress_callback)(void *clientp, double dltotal, double dlnow, double ultotal, double ulnow); // Added
typedef int (*curl_xferinfo_callback)(void *clientp, curl_off_t dltotal, curl_off_t dlnow, curl_off_t ultotal, curl_off_t ulnow); // Added
typedef int (*curl_debug_callback)(CURL *handle, curl_infotype type, char *data, size_t size, void *userptr);
typedef int (*curl_multi_timer_callback)(CURLM *multi, long timeout_ms, void *userp); // Added


// --- curl_slist (Definition needed here) ---
struct curl_slist {
  char *data;
  struct curl_slist *next;
};

// --- For curl_multi_wait ---
typedef int curl_socket_t;
#define CURL_SOCKET_BAD (-1)

struct curl_waitfd {
  curl_socket_t fd;
  short events;
  short revents;
};
#define CURL_WAIT_POLLIN    0x0001
#define CURL_WAIT_POLLOUT   0x0004
#define CURL_WAIT_POLLPRI   0x0002


// --- Function Prototypes (matching OMAF usage and full curl.h for these) ---

// Easy interface
CURL *curl_easy_init(void);
void curl_easy_cleanup(CURL *handle);
CURLcode curl_easy_setopt(CURL *handle, CURLoption option, ...);
CURLcode curl_easy_perform(CURL *handle);
CURLcode curl_easy_getinfo(CURL *handle, CURLINFO info, ...);
void curl_easy_reset(CURL *handle);
const char *curl_easy_strerror(CURLcode errornum);

// Multi interface
CURLM *curl_multi_init(void);
CURLMcode curl_multi_add_handle(CURLM *multi_handle, CURL *easy_handle);
CURLMcode curl_multi_remove_handle(CURLM *multi_handle, CURL *easy_handle);
CURLMcode curl_multi_perform(CURLM *multi_handle, int *running_handles);
CURLMcode curl_multi_wait(CURLM *multi_handle, struct curl_waitfd extra_fds[], unsigned int extra_nfds, int timeout_ms, int *numfds);
CURLMsg *curl_multi_info_read(CURLM *multi_handle, int *msgs_in_queue);
void curl_multi_cleanup(CURLM *multi_handle);
CURLMcode curl_multi_setopt(CURLM *multi_handle, CURLMoption option, ...);
const char *curl_multi_strerror(CURLMcode errornum);

// Slist
struct curl_slist *curl_slist_append(struct curl_slist *list, const char *data); // Prototype Added
void curl_slist_free_all(struct curl_slist *list); // Prototype Added

// Global
CURLcode curl_global_init(long flags);
void curl_global_cleanup(void);

#ifdef __cplusplus
} // extern "C"
#endif

#endif // FAKE_CURL_H_
